/**
 * jMID.Decoder.min.js v0.2.1
 *
 * A javascript library for reading, manipulating, writing, and timing MIDI files
 * @author Steven Sojka - Tuesday, March 19, 2013
 *
 * MIT Licensed
 */
var jMID=function(e){var k=function(b,i){var a=new e.Event({track:i});a.set("deltaTime",b.readVarInt());var d=b.readInt8(),c=e.EventTypes;if(240==(d&240))switch(d){case c.META:a.set("type","meta");var f=b.readInt8(),d=b.readVarInt(),c=e.SubEventTypes,h;for(h in c){var g=c[h];if(f==g){switch(g){case c.SEQUENCE_NUMBER:a.set("number",b.readInt16());break;case c.MIDI_CHANNEL_PREFIX:a.set("channel",b.readInt8());break;case c.SET_TEMPO:a.set("microsecondsPerBeat",(b.readInt8()<<16)+(b.readInt8()<<8)+b.readInt8());
a.set("subtype","setTempo");break;case c.SMPTE_OFFSET:f=b.readInt8();a.set({hourByte:f,frameRate:{"0":24,32:25,64:29,96:30}[f&96],hour:f&31,min:b.readInt8(),sec:b.readInt8(),frame:b.readInt8(),subframe:b.readInt8(),subtype:"smpteOffset"});break;case c.TIME_SIGNATURE:a.set({numerator:b.readInt8(),denominator:Math.pow(2,b.readInt8()),metronome:b.readInt8(),thirtyseconds:b.readInt8(),subtype:"timeSignature"});break;case c.KEY_SIGNATURE:a.set({key:b.readInt8(!0),scale:b.readInt8(),subtype:"keySignature"});
break;case c.TEXT:a.set({subtype:"text",text:b.read(d)});break;case c.COPYRIGHT_NOTICE:a.set({subtype:"copyrightNotice",text:b.read(d)});break;case c.TRACK_NAME:a.set({subtype:"trackName",text:b.read(d)});break;case c.INSTRUMENT_NAME:a.set({subtype:"instrumentName",text:b.read(d)});break;case c.LYRICS:a.set({subtype:"lyrics",text:b.read(d)});break;case c.MARKER:a.set({subtype:"marker",text:b.read(d)});break;case c.CUE_POINT:a.set({subtype:"cuePoint",text:b.read(d)});break;case c.END_OF_TRACK:a.set("subtype",
"endOfTrack");break;case c.SEQUENCER_SPECIFIC:a.set({subtype:"sequencerSpecific",data:b.read(d)});break;default:a.set({subtype:"unknown",data:b.read(d)})}break}}break;case c.SYSEX:a.set("type","sysex");f=b.readVarInt();a.set("data",b.read(f));break;case c.DIVIDED_SYSEX:event.set("type","dividedSysex");f=stream.readVarInt();event.set("data",stream.read(f));break;default:throw Error("Unrecognized event");}else for(f in g=d,d=e.SubEventTypes,0==(g&128)?(h=g,g=this._lastEventType):(h=b.readInt8(),this._lastEventType=
g),c=g>>4,a.set("channel",g&15),a.set("type","channel"),d)if(g=d[f],c==g)switch(g){case d.NOTE_OFF:a.set("noteNumber",h);a.set("subtype","noteOff");a.set("velocity",b.readInt8());break;case d.NOTE_ON:a.set("noteNumber",h);a.set("subtype","noteOn");a.set("velocity",b.readInt8());0==a.get("velocity")&&a.set("subtype","noteOff");break;case d.NOTE_AFTER_TOUCH:a.set("noteNumber",h);a.set("subtype","noteAfterTouch");a.set("amount",b.readInt8());break;case d.CONTROLLER:a.set("subtype","controller");a.set("controllerType",
h);a.set("value",b.readInt8());break;case d.PROGRAM_CHANGE:a.set("subtype","programChange");a.set("programNumber",h);break;case d.CHANNEL_AFTER_TOUCH:a.set("subtype","channelAfterTouch");a.set("amount",h);break;case d.PITCH_BEND:a.set("subtype","pitchBend"),a.set("coarse",h),a.set("fine",b.readInt8()),a.set("value",a.coarse+(a.fine<<7))}return a},j=function(b){var e=b.read(4),a=b.readInt32();return{id:e,length:a,data:b.read(a)}};e.Decoder=function(){};e.Decoder.prototype={decode:function(b){for(var i=
j(b),a=new e.Stream(i.data),d=a.readInt16(),i=a.readInt16(),c=a.readInt16(),a=[],d={format:d,trackCount:i,ticksPerBeat:c},c=0;c<i;c++){a[c]=new e.Track;for(var f=j(b),f=new e.Stream(f.data);!f.eof();)a[c].pushEvent(k.call(this,f,a[c]))}return new e.File({header:d,tracks:a})}};e.Emitter&&e.Emitter.register(e.Decoder);return e}(jMID||{});
